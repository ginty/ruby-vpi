VPI4R is a [Ruby] interface to [IEEE 1364-2005 Verilog VPI].  It serves as a
platform for unit testing, rapid prototyping, and systems integration of
Verilog modules through Ruby.  It was developed as part of [my masters
thesis]( http://snk.tuxfamily.org/txt/masters_thesis.html ) ([PDF version](
http://snk.tuxfamily.org/txt/masters_thesis.pdf )) back in 2006.

%#----------------------------------------------------------------------------
### Goals
%#----------------------------------------------------------------------------

* Create complex Verilog test benches easily and wholly in Ruby.
* Use agile software development practices to develop hardware.

%#----------------------------------------------------------------------------
### Features
%#----------------------------------------------------------------------------

Portable:

  * Works on Windows, Mac OSX, GNU/Linux, and UNIX.
  * Supports all major Verilog simulators available today.

Agile:

  * Allows [test-driven]( http://www.testdriven.com ) and [behavior-driven](
    http://behaviour-driven.org ) development.
  * Allows rapid prototyping for design exploration.
  * Test bench generator accomodates design changes.
  * There is *absolutely no compiling* whatsoever!

Powered by [Ruby]:

  * Unlimited-length integers!
  * Automatic memory management (garbage collection).
  * Regular expressions and text processing like Perl.
  * Lambdas and closures for functional programming.
  * Pure OOP with strong, dynamic typing.
  * Portable multi-threading (green threads).
  * Native system calls and I/O.
  * Highly readable and maintainable code.
  * [ruby-debug] for interactive debugging.
  * [rcov] for test coverage analysis.

%#----------------------------------------------------------------------------
### Applications
%#----------------------------------------------------------------------------

Adapted from [The Verilog PLI Handbook](
http://www.sutherland-hdl.com/publications.html ), second edition:

  * Bus-functional models in Ruby
  * Reading test vector files
  * Delay calculation
  * Custom output displays
  * Co-simulation
  * Design debug utilities
  * Simulation analysis

Adapted from [Pin Hong's](
http://embedded.eecs.berkeley.edu/Alumni/pinhong/scriptEDA/ ) observations:

  * Writing hardware models in Ruby
  * Dumping or processing netlist data from Verilog database
  * Dumping or processing simulation data
  * Feeding dynamic simulation stimuli
  * Back-annotating delay information
  * Interactive logic simulation
  * Building a distributed simulation

%#----------------------------------------------------------------------------
### Resources
%#----------------------------------------------------------------------------

* Issue tracker (report bugs, request features, get help):
  <http://github.com/sunaku/vpi4r/issues>

* Mailing list (ask questions, discuss ideas):
  <http://rubyforge.org/mailman/listinfo/ruby-vpi-discuss>

* Source code (browse online or obtain with [Git](http://git-scm.com)):
  <http://github.com/sunaku/vpi4r>

* API documentation:
  <<%= File.join(VPI4R::WEBSITE, 'api/') %>>

* Announcements feed:
  <<%= File.join(VPI4R::WEBSITE, 'ann.xml') %>>

* Official website:
  <<%= VPI4R::WEBSITE %>>

%#----------------------------------------------------------------------------
### Setup
%#----------------------------------------------------------------------------

Prerequisites:

  * [Ruby] 1.8.6 or newer, including header and linkable object files neeeded
    to build Ruby language extensions in the C language.

  * [RubyGems] 1.3.6 or newer.

  * [SWIG] version 1.3.29 or newer.

  * C language compiler and `make`.

  * Verilog simulator with VPI support:

    * [GPL Cver] version 2.11a or newer.

    * [Icarus Verilog] version 0.8 or newer.

    * [Synopsys VCS] any version with `-load` option.

    * [Mentor Modelsim] any version with `-pli` option.

    * [Cadence NC-Sim] any version with `+loadvpi` option.

Installing:

    gem install vpi4r

Upgrading:

    gem update vpi4r

Removing:

    gem uninstall vpi4r
