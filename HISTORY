%#----------------------------------------------------------------------------
## VERSIONS
%#----------------------------------------------------------------------------

This section contains release notes of current and past releases.

%#----------------------------------------------------------------------------
### Version 12.0.0 (2006-12-07)
%#----------------------------------------------------------------------------

This release adds support for the [test/spec] library, fixes some bugs, and
improves the user manual and generated tests.

Incompatible changes:

  * The `SIMULATOR_ARGS` parameter of generated runners has been renamed to
    `SIMULATOR_ARGUMENTS` for clarity.

  * The automated test generator no longer displays the **backup** status
    indicator, now supplies a third argument to the `MERGER` command, and no
    longer replaces existing files with newly generated content during the
    **update** action.  Instead, it now writes the newly generated output to a
    ".new" file and then invokes the `MERGER` command.

  * Specifications generated in the **generic** format no longer contain a
    class that is instantiated in the generated Ruby bench.

  * Generated Verilog benches no longer supply the `-w` option to the
    `$ruby_init` task.

  * The `ruby-vpi/runner_proxy` library now invokes test runners (1) just
    before exiting (thus, you can invoke tasks in the main Rakefile before the
    test runners are invoked) and (2) located within any directory that is a
    descendant of the current working directory.

  * Icarus Verilog 0.8 has been demoted to a "mostly acceptable" status
    because of its inability to resolve relative child handles by name.

New features:

  * The `Vpi::Handle` class has two new methods: `x!` and `z!`, which set the
    handle's logic value to _unknown_ and _high impedance_ respectively.

  * Generated runners now contain (1) better explanations to accomodate new
    users and (2) a `:setup` task which is invoked before the simulator runs.
    This task can be used to make preprations, such as converting Verilog
    header files into Ruby, for the simulation.

  * The automated test generator accepts new command-line options:

    * `--test-unit`
    * `--test-spec`
    * `--tspec`

Bug fixes:

  * The tests for the simple up-counter example were randomly failing because
    the specifications were not asserting the design's `reset` signal long
    enough.  So the design was getting into weird states and behaving in a
    non-deterministic way.  This problem has been fixed.

  * The automated test generator was crashing when parsing module parameters
    of an input file which did not have any module parameters.  This has been
    fixed.

Housekeeping:

  * Generated Verilog benches now contain simpler clock generation code.

  * The user manual has been revised and some minor issues have been fixed.

%#----------------------------------------------------------------------------
### Version 11.1.1 (2006-11-15)
%#----------------------------------------------------------------------------

This release fixes a bug in the automated test generator, unifies the user
manual and the website into a single documentation system, and adds support
for [rSpec] 0.7.2.

Thank you:

  * John Burr found a bug in the automated test generator.

Bug fixes:

  * The automated test generator no longer crashes when parsing a Verilog
    module declaration that contains multiple module parameters.

    Thanks to John Burr for finding and reporting this bug.

Housekeeping:

  * The user manual and the website are now written using a custom
    documentation system based on RedCloth and ERB instead of DocBook-XML.
    This makes it easier to edit the user manual and reuse its content in
    other areas of the website.  However, this means that the user manual is
    now available _only_ in HTML format.  If you still wish to have a
    plain-text version, you can use a text-based browser, such as [lynx](
    http://lynx.browser.org/ ), to perform the necessary conversion.

%#----------------------------------------------------------------------------
### Version 11.1.0 (2006-11-08)
%#----------------------------------------------------------------------------

This release fixes a bug in generated benches, improves the `Vpi::Handle`
class, and improves performance by roughly 20%.

Thank you:

  * Matt Fischler found the bug in generated benches (see below).

New features:

  * `Vpi::Handle.method_missing` no longer requires that the first letter of a
    method be lower case.  For example, now you can now write `handle.IntVal`
    in addition to `handle.intVal`.

  * `Vpi::Handle.to_s` and `Vpi::Handle.inspect` now produce more informative
    output.  For example, what used to appear as:

        #<SWIG::TYPE_p_unsigned_int:0x2aaab6574fa0>

    now appears as:

        #<Vpi::Handle vpiModule fullName=counter_rspec_bench, size=-1, file=counter_rspec_bench.v, lineNo=2>

    You can also provide a list of VPI properties, as names or integer
    constants, to those methods to see additional information in the output.

  * `Vpi::Handle` now implements all methods from `Enumerable`, such as `map`,
    `each`, `select`, and so on.  However, unlike their counterparts in
    `Enumerable`, these methods also accept a list of VPI properties, as names
    or integer constants.  Thus, you are now able to write the following to
    obtain a list of child handles to registers and nets whose capacity is
    greater than 5 bits.

        handle.select(:reg, :net) {|h| h.size > 5}

  * The `Vpi::Handle.[]`, `Vpi::Handle.get_value`, and `Vpi::Handle.put_value`
    methods now accept names of VPI properties as well as their integer
    constants.  Thus, you are now able to write the following to obtain
    a list of handles to all child registers and nets.

        handle[:reg, :net]

  * `Vpi::Handle.method_missing` has been fixed to accept operations with
    multiple underscores.  For example, before this release, you could not
    write the following because the `find_all_reg` method would be interpreted
    as the operation `find` and the VPI property `all_reg`.

        handle.find_all_reg {|r| r.name =~ /foo/}

  * `Vpi::Handle.method_missing` has been refactored to cache queries.  There
    is now, approximately, 20% improvement in performance.

  * The class `SWIG::TYPE_p_unsigned_int` has been aliased as `Vpi::Handle`
    for easier access.

Bug fixes:

  * A bug in generated Verilog and Ruby benches, which caused the "ruby: no
    such file to load -- ruby-vpi (LoadError)" error, has been fixed.  Please
    regenerate your tests to apply this bug fix to your tests.

    Thanks to Matt Fischler for reporting this bug.

  * The `IntegerGenerator` class, in the pipelined ALU example, has been fixed
    so that multiple instances do not interfere with the generation of each
    other's prime integers.

  * Due to a bug in the Rakefile, the reference documentation was not included
    in the previous few releases.  This has been fixed.

%#----------------------------------------------------------------------------
### Version 11.0.0 (2006-11-05)
%#----------------------------------------------------------------------------

This release shortens generated Ruby benches and uses the less confusing
notation for defining singleton methods in generated designs and prototypes.

Incompatible changes:

  * The arguments for the `RubyVPI.init_bench` method have changed.

  * `generate_test.rb` no longer emits undocumented status indicators: _name_
    and _format_.

  * The source code is no longer distributed as a zip package, because it
    seems to be quite underutilized in comparison to the tgz and gem packages.

New features:

  * Generated Ruby benches have been shortened to just _one_ line of code!

  * The pipelined ALU example now has an updated `IntegerGenerator` class.

Housekeeping:

  * The less confusing Ruby notation of:

        def some_object.a_singleton_method
          do_stuff
        end

    is now used instead of this notation:

        class << some_object
          def a_singleton_method
            do_stuff
          end
        end

    The tutorial and examples have been updated accordingly.

%#----------------------------------------------------------------------------
### Version 10.0.0 (2006-11-05)
%#----------------------------------------------------------------------------

This release adds the ability to access a handle's children and reduces the
amount of code produced by the automated test generator.

Thank you:

  * Matt Fischler found the problem of misdirected compilation errors in
    Verilog benches.

Incompatible changes:

  * The way in which Ruby-VPI and generated tests interact has changed:  the
    design is now a VPI handle object and the `design.rb` and `proto.rb` files
    define singleton methods for that object.

    I suggest that you regenerate your existing tests (just run
    `generate_test.rb` again) whilst employing the service of a text merging
    tool (see the user manual).

  * You can now access a handle's children by simply calling methods on it.
    In the event that a child handle has the same name as a VPI property, the
    child is given priority.  However, you can always access VPI properties
    explicitly via the `get_value` and `put_value` methods.

  * `generate_test.rb` no longer accepts the `-s` and `-u` options.  Use their
    longer counterparts `--rspec` and `--xunit` instead.

  * Generated Verilog benches no longer divert compilation errors from Verilog
    design files.  That is, if the Verilog simulator finds compilation errors
    in a Verilog design file, it will report that the Verilog design file is
    at fault (instead of reporting that the generated Verilog bench is at
    fault).

New features:

  * Generated tests have been greatly simplified to reduce the amount of work
    for the user: the design is now just a handle to the module in the Verilog
    bench and `include Vpi` and `@design` are no longer generated.  The
    tutorial and examples have been updated accordingly.

  * The user is now notified when a backup of an existing file is made by the
    automated test generator.

Housekeeping:

  * Revised the stylesheet to make disjoint sections readily distinguishable
    from each other, through generous spacing and minor coloring.

  * Added tips about `ruby-vpi/runner_proxy`, `rake -T`, and using `kdiff3`
    with `generate_test.rb`.

  * Moved installation information into a new "setup" chapter.

%#----------------------------------------------------------------------------
### Version 9.0.0 (2006-10-28)
%#----------------------------------------------------------------------------

This release improves the automated test generator and adds new content to the
user manual.

Thank you:

  * Matt Fischler helped test and debug the installation of Ruby-VPI on
    Windows (via Cygwin).

Incompatible changes:

  * The command-line options for `generate_test.rb` have changed.  Run the
    following command for details.

        generate_test.rb --help

New features:

  * Test runners now attempt to resolve paths in `SIMULATOR_SOURCES` by
    searching for them within the directories specified in
    `SIMULATOR_INCLUDES`.

  * The automated test generator now:

    * Only creates output files when necessary.

    * Updates existing output files using [text merging tools](
      manual.html#setup.recom ) if possible.  (Refer to `MERGER` in the help
      information of `generate_test.rb`.)

    * Emits progress information similar to Ruby on Rails.

Bug fixes:

  * The C extension now compiles without errors in Cygwin.

Housekeeping:

  * Synopsys VCS is now used in a better way (via the `-load` option).

  * The old PLI table file (`synopsys_vcs.tab`) has been removed.

  * The user manual now:

    * Includes instructions for installing on Windows (via Cygwin).

    * Has a recommended software section, with links to text merging tools.

    * Uses the term [xUnit]( http://en.wikipedia.org/wiki/XUnit ) instead of
      "unit test".

    * Correctly spells "rSpec".

%#----------------------------------------------------------------------------
### Version 8.2.0 (2006-10-24)
%#----------------------------------------------------------------------------

This release simplifies configuration of generated tests.

Thank you:

  * [CMPE-126 students]( http://www.soe.ucsc.edu/classes/cmpe126/Fall06/ ) for
    their comments and criticisms.

New features:

  * Generated runners now have a `SIMULATOR_INCLUDES` array, whose entries
    specify places where Verilog source files, needed by the Verilog design,
    reside.

  * Generated Verilog benches now inherit all `include` and `define`
    directives from the Verilog design in a simpler manner.

  * A generated test no longer requires its Verilog design to reside in the
    same directory.  The sample tests have been updated accordingly.

%#----------------------------------------------------------------------------
### Version 8.1.0 (2006-10-21)
%#----------------------------------------------------------------------------

This release adds an integer library and renames the `vpi_util` library.

Incompatible changes:

  * The `vpi_util` library has been renamed to `vpi`.  This change should not
    affect your code unless you explicitly imported this library via:

        require 'ruby-vpi/vpi_util'

    In which case, you should update your code to use:

        require 'ruby-vpi/vpi'

New features:

  * An integer library has been added to simplify common tasks related to
    hardware and the binary number system.  You can import this library for
    use via:

        require 'ruby-vpi/integer'

%#----------------------------------------------------------------------------
### Version 8.0.0 (2006-10-13)
%#----------------------------------------------------------------------------

This release renames some identifiers for consistency, updates the
documentation, and improves integration with RubyGems.

Incompatible changes:

  * The `RubyVPI` module has been renamed to `RubyVpi`.

  * The `PROTO` environment variable has been renamed to `PROTOTYPE`.

    In addition to using `unset`, you can now disable simulation of the
    prototype by assigning an empty value to this variable.

Housekeeping:

  * We now use [Darcs]( http://darcs.net ) for revision control, instead of
    Subversion.  The source repository can now be accessed at
    <http://ruby-vpi.rubyforge.org/src/ruby-vpi>.

  * The source code is now distributed in tar.gz and zip form, in addition to
    gem.

  * Some identifiers have been renamed for better consistency.

  * The user manual now resides directly within the `doc/` directory.

  * The integration of documentation in `gem_server` has been improved.

  * The glossary and tutorial in the user manual have been revised.

%#----------------------------------------------------------------------------
### Version 7.3.0 (2006-09-30)
%#----------------------------------------------------------------------------

This release fixes a bug in generated Verilog benches, includes parsed
constants in generated tests, and adds new methods to handles.

New features:

  * `VPI::Handle#x?` checks if the logic value is "don't care".

  * `VPI::Handle#z?` checks if the logic value is high impedance.

  * The test generator tool now provides parsed Verilog constants and
    include-directives in generated Verilog benches; and parsed Verilog
    constants in generated Ruby designs.

    The pipelined ALU example has been revised accordingly.

  * A library for parsing Verilog source code has been added as
    `lib/ruby-vpi/verilog_parser.rb`.

Bug fixes:

  * Module instantiation code in generated Verilog benches has been fixed.
    Whitespace between the module type and instance variable was missing.

%#----------------------------------------------------------------------------
### Version 7.2.0 (2006-09-15)
%#----------------------------------------------------------------------------

This release adds initial support for code coverage analysis via the [rcov
library]( http://eigenclass.org/hiki.rb?rcov ).

Thank you:

  * Mauricio Fernandez helped me use rcov directly from inside Ruby.

New features:

  * Added initial support (full capabilites of the rcov library, such as its
    various analysis modes, are not yet utilized) for code coverage analysis,
    which can be enabled by setting the `COVERAGE` environment variable to a
    non-empty value before running a test.

    For example, you can run a test with the GPL Cver simulator while enabling
    the generation of code coverage reports as follows:

        rake cver COVERAGE=1

    Coverage reports are generated in text and HTML formats.

%#----------------------------------------------------------------------------
### Version 7.1.0 (2006-08-29)
%#----------------------------------------------------------------------------

This release simplifies running of multiple tests, restores compatibility with
[Synopsys VCS], and better integrates with RubyGems.

New features:

  * Added `lib/ruby-vpi/runner_proxy.rb` library which, when embedded into a
    Rakefile, runs all generated tests in the working directory with any
    specified arguments.  For example, have a look at the
    `samp/counter/Rakefile` file.

  * Ruby-VPI documentation is now available through RubyGems' [`gem_server`
    web interface]( http://docs.rubygems.org/read/chapter/2#page10 ).

Bug fixes:

  * Fixed a bug that prevented one from running tests with Synopsys VCS.

  * The user manual now discusses how to determine the location of a Ruby-VPI
    installation.

Housekeeping:

  * The `tpl/` directory has been removed.

%#----------------------------------------------------------------------------
### Version 7.0.0 (2006-08-29)
%#----------------------------------------------------------------------------

This release distributes Ruby-VPI as a gem, improves portability of generated
tests, and fixes a bug.

Incompatible changes:

  * Ruby-VPI is now distributed as a source-only gem.  You can decompress the
    gem without installing it onto your system by running the the following
    command:

        gem install -i output_directory ruby-vpi-7.0.0.gem

    You can still obtain the source code directly from the Subversion
    repository.  The tools in `bin/` become available in your system's `bin/`
    directory when the gem is installed.

  * Test runners no longer have to specify the path to Ruby-VPI installation
    directory.  Instead, they simply:

        require 'ruby-vpi/runner'

    Thus, you can run your tests on any machine with Ruby-VPI without having
    to know where it is installed.

  * Ruby benches now invoke `RubyVPI.init_bench` instead of the following to
    become initialized.

        require 'bench'
        setup_bench

  * All Ruby libraries in the `lib/` directory have been moved into
    `lib/ruby-vpi/` to prevent load-path clashes with other gems.  You should
    access these libraries by prefixing their path with "ruby-vpi".  For
    example:

        require 'vpi_util'

    should now be written as:

        require 'ruby-vpi/vpi_util'

Bug fixes:

  * `put_value()` now accomodates register value overflows when verifying the
    value it has written.

  * The `src/` directory has been renamed to `ext/` to follow RubyGems
    convention.

Housekeeping:

  * Usage and help information has been added to the `header_to_ruby.rb` tool.

  * Incorrect spelling of GPL Cver (v should be uncapitalized) has been fixed.

  * Incorrect link to GPL Cver website has been fixed.

  * The user manual has been updated according to all of the above changes.

%#----------------------------------------------------------------------------
### Version 6.3.0 (2006-08-27)
%#----------------------------------------------------------------------------

This release adds support for the [GPL Cver] simulator, provides both binary
and source packages, and explicitly defines the version numbering system.

New features:

  * The GPL Cver simulator is now supported.

  * Ruby-VPI now only needs to be built once.  You can run tests with
    different Verilog simulators without having to re-compile Ruby-VPI.

  * Release packages are now available in both source and binary form.

Bug fixes:

  * The RSpec based specifications for the counter example now use the
    `should_equal` instead of the `should_be` assertion, because the latter
    ensures strict equivalence.  For instance, it will fail when a Fixnum is
    compared to a Bignum.

Housekeeping:

  * We now follow the RubyGems project's [rational versioning policy](
    http://www.rubygems.org/read/chapter/7 ).  The version numbers of previous
    releases have been revised accordingly:

        Release Date | Old Version | New Version
        ------------ | ----------- | -----------
         2006-08-26  |    0.9.2    |    6.2.0
         2006-08-09  |    0.9.1    |    6.1.0
         2006-08-07  |     0.9     |    6.0.0
         2006-08-04  |    0.8.1    |    5.1.1
         2006-07-29  |     0.8     |    5.1.0
         2006-07-22  |     0.7     |    5.0.0
         2006-05-25  |     0.6     |    4.0.0
         2006-05-13  |     0.5     |    3.2.0
         2006-04-28  |     0.4     |    3.1.0
         2006-04-23  |     0.3     |    3.0.0
         2006-04-17  |     0.2     |    2.0.0
         2006-02-26  |     0.1     |    1.0.0
         1999-10-31  |     0.0     |    0.0.0

%#----------------------------------------------------------------------------
### Version 6.2.0 (2006-08-26)
%#----------------------------------------------------------------------------

This release beautifies generated tests, adds checks to find signal width
bugs, and includes a new tool.

Incompatible changes:

  * `put_value()` now returns the value it puts.  Therefore, it is easier to
    chain together a series of assignments:

        foo.intVal = bar.intVal = baz.intVal = 10

  * The test generator now decouples Ruby-VPI paths from Verilog benches via
    the RUBYLIB environment variable.

New features:

  * `put_value()` now verifies that the value it puts was written correctly.
    This helps to find bugs regarding invalid assumptions about the number of
    bits supported by a signal.

  * A tool which converts Verilog headers into Ruby has been added.

Housekeeping:

  * The test generator now uses ERB templates which ensures nice indentation
    of generated output.

  * The source code is now indented with two spaces instead of one tab
    character.

%#----------------------------------------------------------------------------
### Version 6.1.0 (2006-08-09)
%#----------------------------------------------------------------------------

This release simplifies generated tests and fixes a bug.

New features:

  * The test generator now produces simpler Ruby benches and specifications.

Bug fixes:

  * Boolean VPI property values are now correctly converted into Ruby truth values.

Housekeeping:

  * A template used by generated specifications has been added, and the
    counter example and tutorial have also been simplified accordingly.

%#----------------------------------------------------------------------------
### Version 6.0.0 (2006-08-07)
%#----------------------------------------------------------------------------

This release adds support and documentation for rapid prototyping of Verilog
designs in Ruby.

Incompatible changes:

  * The directory structure has been reorganized as follows:

    * `ext/` &rarr; `src/`
    * `tools/` &rarr; `bin/`
    * `examples/` &rarr; `samp/`

  * All template files have been moved into the `tpl/` directory.

New features:

  * Support for prototyping designs in Ruby, before they are implemented in
    Verilog, has been added.  The _same_ specification can now be used to
    verify both prototype _and_ design!  :-)

  * The tutorial in the user manual has been updated to discuss prototyping,
    and prototypes have been added to the counter example.

Housekeeping:

  * The user manual has been revised for consistency.

%#----------------------------------------------------------------------------
### Version 5.1.1 (2006-08-04)
%#----------------------------------------------------------------------------

This release fixes unreadable syntax coloring in the user manual.

Thank you:

  * Todd Nagengast and Matt Fischler notified me about unreadable text in the
    user manual.

Housekeeping:

  * Source code comments in the user manual are now readable.

  * The README and HISTORY files have been converted to [textile](
    http://www.textism.com/tools/textile/ ) format.

%#----------------------------------------------------------------------------
### Version 5.1.0 (2006-07-29)
%#----------------------------------------------------------------------------

This release adds a tutorial to the user manual, and improves the tools and
examples.

Thank you:

  * Phil Tomson corrected the URL of the RHDL website in the user manual.

New features:

  * `--name` and `-n` options, which lets you specify an identifier for a
    generated test, have been added to the `generate_test.rb` tool.

  * A tutorial, based on the counter example, has been added to the user
    manual.

  * A specification, expressed in unit test format, has been added to the
    counter example.

Bug fixes:

  * The value of a handle's boolean VPI property is treated as `false` if it
    is zero, because zero is `false` in the C language.

  * Running `rake clobber` in an example directory no longer destroys
    documentation in the Ruby-VPI directory.

  * The examples' Rakefiles now invoke all tests present in the directory via
    the `launcher_template.rake` template.

Housekeeping:

  * The user manual's appearance has been dramatically improved with syntax
    coloring for source code, and [graphics for admonitions and navigation](
    http://tango.freedesktop.org ).

  * The Rake template for test runners (generated by `tools/generate_test.rb`)
    has moved from `examples/template.rake` to
    `examples/runner_template.rake`.

%#----------------------------------------------------------------------------
### Version 5.0.0 (2006-07-22)
%#----------------------------------------------------------------------------

This release enhances the VPI utility layer and adds new content to the user
manual.

Thank you:

  * Jan Decaluwe corrected the description of MyHDL in the user manual.

Incompatible changes:

  * The `handle.value` and `handle.value=` methods have been removed.

New features:

  * The VPI utility layer provides access to VPI properties of handles in a
    [simpler, more powerful way]( manual.html#background.org.vpi ).

  * All VPI properties, except delay values, are now accessible from a handle.

Housekeeping:

  * The user manual has been revised and new content in the organization and
    usage sections has been added.

  * SWIG is no longer required for users because its output is included in the
    release package.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux

%#----------------------------------------------------------------------------
### Version 4.0.0 (2006-05-25)
%#----------------------------------------------------------------------------

This release adds a comprehensive user manual, upgrades from make to [Rake](
http://rake.rubyforge.org ), and improves the test generation tool.

Thank you:

  * Jose Renau solved the problem of strange delays that occurred whenever a
    design was reset.

Incompatible changes:

  * Rake has replaced the role of `make`.  All makefiles have been converted
    accordingly.

New features:

  * The test generation tool now generates multiple files (runner, bench,
    design, spec) and makes backups of existing files.  See its help
    information for details.

  * A comprehensive user manual, written in DocBook-XML, has been added.

  * Support for RSpec 0.5.4 has been added.

  * The example "counter" test bench now makes use of RSpec.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux

%#----------------------------------------------------------------------------
### Version 3.2.0 (2006-05-13)
%#----------------------------------------------------------------------------

This release adds a tool which generates test benches, and adds support for
[Behavior Driven Development]( http://behaviour-driven.org ) via the [RSpec](
http://rspec.rubyforge.org ) library.

Thank you:

  * Scott L Holmes helped me [use the RSpec library without its runner](
    http://article.gmane.org/gmane.comp.lang.ruby.general/150087 ) program.

New features:

  * Added a test generation tool, which generates most of a Ruby-VPI test
    bench from a Verilog 2001 module declaration.

  * Ability to use RSpec in a test bench has been added.

  * Ability to specify arbitrary command-line arguments to Verilog simulators
    has been added in the examples' makefile template.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux

%#----------------------------------------------------------------------------
### Version 3.1.0 (2006-04-28)
%#----------------------------------------------------------------------------

This release adds simple ways of reading and writing values to VPI handles,
adds documentation for the VPI utility layer, and fixes the pipelined ALU
example.

Incompatible changes:

  * The `msim` makefile target for Mentor Modelsim has been renamed to `vsim`.

New features:

  * Simple, consistent ways of reading and writing values to handles have been
    added to the VPI utility layer.  These ways are described in the
    `SWIG::TYPE_p_unsigned_int` class' documentation.

  * The makefiles now use the `rbconfig` library to determine the default
    compiler and linker flags for Ruby.

Bug fixes:

  * A race condition in the pipelined ALU example has been fixed.  This
    example should now run successfully in all Verilog simulators.

Housekeeping:

  * The project wiki has been abandoned in favor of RDoc.

  * The project website is now generated by RDoc.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux

%#----------------------------------------------------------------------------
### Version 3.0.0 (2006-04-23)
%#----------------------------------------------------------------------------

This release adds support for the _entire_ [IEEE Std. 1364-2005](
http://ieeexplore.ieee.org/xpl/standardstoc.jsp?isnumber=33945 ) VPI
interface, and updates the examples into unit tests.

Thank you:

  * The [SWIG developers]( http://www.swig.org/guilty.html ) made this project
  _much_ easier! ;-)

Incompatible changes:

  * The `VPI` module in Ruby has been renamed to `Vpi` and its sub-classes and
    functionality have been replaced by the VPI utility layer (see
    `src/vpi_util.rb`).  As a result, the `VPI::Handle` class and the
    `VPI::stop`, `VPI::finish`, and `VPI::reset` methods have been removed.

  * The `vsim` Makefile target for Mentor Modelsim has been renamed to `msim`.

New features:

  * The Ruby interface to VPI is now generated by [SWIG].

  * The ["final ballot" version](
    http://www.boydtechinc.com/ptf/archive/ptf_2005/0737.html ) of the
    `vpi_user.h` header file is now packaged along with and used by Ruby-VPI.

Housekeeping:

  * The examples now make use of Ruby's `Test::Unit` unit testing framework.

  * The makefiles for the examples have been simplified through the use of a
    common template.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux

%#----------------------------------------------------------------------------
### Version 2.0.0 (2006-04-17)
%#----------------------------------------------------------------------------

This release fixes major bugs, adds support for [Mentor Modelsim], and removes
the `$ruby_task` callback.

Thank you:

  * Nobu Nakada explained the [cross-thread violation on rb_gc()](
    http://article.gmane.org/gmane.comp.lang.ruby.general/146653 ) error.

Incompatible changes:

  * Removed `$ruby_task("task name")` callback and `VPI::register_task("task
    name")` because interprocess communication is complicated at present.

New features:

  * The `test/unit` library can now be used in Ruby test bench.
  * Mentor Modelsim Verilog simulator now works with Ruby-VPI.
  * Added piplelined ALU example.

Bug fixes:

  * The "cross-thread violation on rb_gc()" error has been fixed.
  * The "stack level too deep (SystemStackError)" error has been fixed.

Tested and developed using:

  * Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4 and Modelsim 6.1d on x86_64 GNU/Linux
  * Ruby 1.8.4 and Synopsys VCS-MX X-2005.06-SP1 on SPARC4 SunOS 5.10

%#----------------------------------------------------------------------------
### Version 1.0.0 (2006-02-26)
%#----------------------------------------------------------------------------

This release adds enough Verilog VPI functionality to make Ruby-VPI usable for
simple test benches:

  * access Verilog objects through VPI handles
  * read and change VPI handle values
  * stop, finish, restart the simulation

Thank you:

  * Jose Renau helped me debug how Synopsys VCS works with Verilog VPI.  The
    problem was that VCS required calltf signatures to be `void (**)(void)`,
    whereas the Verilog standard defines a calltf signature as `PLI_INT32
    (**)(PLI_BYTE8**)`.

  * Ross Bamford, Eric Hodel, and Yukihiro Matsumoto [helped me discover](
    http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/180662 ) why
    the `SystemStackError` was happening.

New features:

  * Added ability to pass arbitrary command-line arguments to the Ruby
    interpreter (using `$ruby_init`).  Now you can invoke any Ruby script you
    want, instead of `pli_init.rb`.

  * Added ability to dynamically register system tasks from Ruby, using
    `VPI::register_task("task name")`, and call them from Verilog, using
    `$ruby_task("task name")`.

  * Added `VPI::Handle` class which encapsulates a `vpiHandle` VPI object.

  * Implemented some Verilog VPI functionality:

    * `VPI::handle_by_name(string, VPI::Handle)` &rarr; `VPI::Handle`
    * `VPI::handle_by_name(string)` &rarr; `VPI::Handle`
    * `VPI::Handle.put_value(integer)`
    * `VPI::Handle.value = integer`
    * `VPI::Handle.get_value` &rarr; `integer`
    * `VPI::Handle.value` &rarr; `integer`
    * `VPI::stop`
    * `VPI::finish`
    * `VPI::reset`

Tested and developed using:

  * Ruby 1.8.2 and Icarus Verilog 0.8 on i686 GNU/Linux
  * Ruby 1.8.4, Synopsys VCS X-2005.06, and Mentor Modelsim 6.1b on i686
    GNU/Linux

%#----------------------------------------------------------------------------
### Version 0.0.0 (1999-10-31)
%#----------------------------------------------------------------------------

This is Kazuhiro HIWADA's initial testing release of Ruby-VPI.  See its
[original announcement](
http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/18193 ) and
[source code]( http://rubyforge.org/frs/?group_id=1339&release_id=8852 ).

* Added ability to relay control from Verilog test bench to Ruby using
  `$ruby_callback()`, and vice versa using `PLI::relay_verilog`.

* Tested and developed using Ruby 1.4 and Verilog-XL from Cadence systems, on
  a SPARC machine running Solaris 2.6.
